package "moonbitlang/quickcheck/feat"

import(
  "moonbitlang/core/bigint"
  "moonbitlang/core/immut/list"
  "moonbitlang/quickcheck/lazy"
)

// Values
fn[T, U] app(Enumerate[(T) -> U], Enumerate[T]) -> Enumerate[U]

fn[T] consts(@list.T[Enumerate[T]]) -> Enumerate[T]

fn[T] default() -> Enumerate[T]

fn[T] empty() -> Enumerate[T]

fn[T] en_index(Enumerate[T], @bigint.BigInt) -> T

fn[T] eval(Enumerate[T]) -> @lazy.LazyList[Finite[T]]

fn[M, N] fin_app(Finite[(M) -> N], Finite[M]) -> Finite[N]

fn[M, N] fin_bind(Finite[M], (M) -> Finite[N]) -> Finite[N]

fn[T, U] fin_cart(Finite[T], Finite[U]) -> Finite[(T, U)]

fn[M] fin_concat(Array[Finite[M]]) -> Finite[M]

fn[T] fin_empty() -> Finite[T]

fn fin_finite(@bigint.BigInt) -> Finite[@bigint.BigInt]

fn[T, U] fin_fmap((T) -> U, Finite[T]) -> Finite[U]

fn[M] fin_mconcat(@lazy.LazyList[Finite[M]]) -> Finite[M]

fn[T] fin_pure(T) -> Finite[T]

fn[T] fin_union(Finite[T], Finite[T]) -> Finite[T]

fn[T, U] fmap(Enumerate[T], (T) -> U) -> Enumerate[U]

fn[T] pay(() -> Enumerate[T]) -> Enumerate[T]

fn[T, U] product(Enumerate[T], Enumerate[U]) -> Enumerate[(T, U)]

fn[T] singleton(T) -> Enumerate[T]

fn[T] to_array(Finite[T]) -> (@bigint.BigInt, @list.T[T])

fn[T : Enumerable, U] unary((T) -> U) -> Enumerate[U]

fn[T] union(Enumerate[T], Enumerate[T]) -> Enumerate[T]

// Types and methods
pub(all) struct Enumerate[T] {
  parts : @lazy.LazyList[Finite[T]]
}
fn[T] Enumerate::en_index(Self[T], @bigint.BigInt) -> T
fn[T] Enumerate::eval(Self[T]) -> @lazy.LazyList[Finite[T]]
fn[T, U] Enumerate::fmap(Self[T], (T) -> U) -> Self[U]
impl[T] Add for Enumerate[T]

pub(all) struct Finite[T] {
  fCard : @bigint.BigInt
  fIndex : (@bigint.BigInt) -> T
}
fn[T] Finite::op_add(Self[T], Self[T]) -> Self[T]
fn[T] Finite::to_array(Self[T]) -> (@bigint.BigInt, @list.T[T])
impl[T : Show] Show for Finite[T]

// Type aliases
pub typealias LazyList[T] = @lazy.LazyList[T]

// Traits
pub(open) trait Enumerable {
  enumerate() -> Enumerate[Self]
}
impl Enumerable for Unit
impl Enumerable for Bool
impl Enumerable for Int
impl Enumerable for Int64
impl Enumerable for UInt
impl Enumerable for UInt64
impl[E : Enumerable] Enumerable for E?
impl[T : Enumerable, E : Enumerable] Enumerable for Result[T, E]
impl[E : Enumerable] Enumerable for @list.T[E]
impl[A : Enumerable, B : Enumerable] Enumerable for (A, B)

