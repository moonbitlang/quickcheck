package moonbitlang/quickcheck

alias @moonbitlang/core/buffer as @buffer
alias @moonbitlang/core/immut/list as @list
alias @moonbitlang/core/quickcheck/splitmix as @splitmix
alias @moonbitlang/quickcheck/feat as @feat
alias @moonbitlang/quickcheck/rose as @rose

// Values
fn alphabet() -> Gen[Char]

fn ap[T, U](Gen[(T) -> U], Gen[T]) -> Gen[U]

fn array_with_size[T](Gen[T], Int) -> Gen[Array[T]]

fn associative[A : Eq]((A, A) -> A) -> ((A, A, A)) -> Bool

fn bind[T, U](Gen[T], (T) -> Gen[U]) -> Gen[U]

fn callback[P : Testable](P, Callback) -> Property

fn char_range(Char, Char) -> Gen[Char]

fn classify[P : Testable](P, Bool, String) -> Property

fn collect[P : Testable, T : Show](P, T) -> Property

fn commutative[A, B : Eq]((A, A) -> B) -> ((A, A)) -> Bool

fn complete_test(State, Property) -> TestSuccess!TestError

fn counterexample[P : Testable](P, String) -> Property

fn distributive_left[A : Eq]((A, A) -> A, (A, A) -> A) -> ((A, A, A)) -> Bool

fn distributive_right[A : Eq]((A, A) -> A, (A, A) -> A) -> ((A, A, A)) -> Bool

fn equal_by[T](Equivalence[T], (T, T) -> Bool) -> Bool

fn expect_fail[P : Testable](P) -> Property

fn expect_gave_up[P : Testable](P) -> Property

fn ext_equal[A, B : Eq]((A) -> B, (A) -> B) -> (A) -> Bool

fn failed() -> SingleResult

fn filter[P : Testable](P, Bool) -> Property

fn find_failure(State, SingleResult, Iter[@rose.Rose[SingleResult]]) -> TestSuccess!TestError

fn flatten_array[T](Array[Gen[T]]) -> Gen[Array[T]]

fn flatten_list[T](@list.T[Gen[T]]) -> Gen[@list.T[T]]

fn flatten_option[T](Gen[T]?) -> Gen[T?]

fn flatten_result[T, E](Result[Gen[T], E]) -> Gen[Result[T, E]]

fn fmap[T, U](Gen[T], (T) -> U) -> Gen[U]

fn forall[T : Testable, A : Show](Gen[A], (A) -> T) -> Property

fn forall_shrink[T : Testable, A : Show](Gen[A], (A) -> Iter[A], (A) -> T) -> Property

fn format(Printer, String) -> String

fn frequency[T](Array[(Int, Gen[T])]) -> Gen[T]

fn frequency_list[T](@list.T[(Int, T)]) -> Gen[T]

fn give_up(State, Property) -> TestSuccess!TestError

fn idempotent[A : Eq]((A) -> A) -> (A) -> Bool

fn ident(Printer, size~ : Int = ..) -> Unit

fn if_fail[P : Testable](P, () -> Unit) -> Property

fn int_bound(Int) -> Gen[Int]

fn int_range(Int, Int) -> Gen[Int]

fn integer_bound(BigInt) -> Gen[BigInt]

fn inverse[A : Eq, B]((A) -> B, (B) -> A) -> (A) -> Bool

fn involutory[A : Eq]((A) -> A) -> (A) -> Bool

fn is_equal[T : Eq](Equivalence[T]) -> Bool

fn join[T](Gen[Gen[T]]) -> Gen[T]

fn label[P : Testable](P, String) -> Property

fn liftA2[A, B, C]((A, B) -> C, Gen[A], Gen[B]) -> Gen[C]

fn liftA3[A, B, C, D]((A, B, C) -> D, Gen[A], Gen[B], Gen[C]) -> Gen[D]

fn liftA4[A, B, C, D, E]((A, B, C, D) -> E, Gen[A], Gen[B], Gen[C], Gen[D]) -> Gen[E]

fn liftA5[A, B, C, D, E, F]((A, B, C, D, E) -> F, Gen[A], Gen[B], Gen[C], Gen[D], Gen[E]) -> Gen[F]

fn liftA6[A, B, C, D, E, F, G]((A, B, C, D, E, F) -> G, Gen[A], Gen[B], Gen[C], Gen[D], Gen[E], Gen[F]) -> Gen[G]

fn list_with_size[T](Int, Gen[T]) -> Gen[@list.T[T]]

fn local_min(State, SingleResult, Iter[@rose.Rose[SingleResult]]) -> (Int, Int, Int, SingleResult)

fn local_min_found(State, SingleResult) -> (Int, Int, Int, SingleResult)

fn map_size[P : Testable](P, (Int) -> Int) -> Property

fn map_total_result[P : Testable](P, (SingleResult) -> SingleResult) -> Property

fn mono_decrease[A : Compare, B : Compare]((A) -> B) -> ((A, A)) -> Bool

fn mono_increase[A : Compare, B : Compare]((A) -> B) -> ((A, A)) -> Bool

fn nat() -> Gen[Int]

fn neg_int() -> Gen[Int]

fn numeral() -> Gen[Char]

fn one_of[T](Array[Gen[T]]) -> Gen[T]

fn one_of_array[T](Array[T]) -> Gen[T]

fn one_of_list[T](@list.T[T]) -> Gen[T]

fn pure[T](T) -> Gen[T]

fn pure_eq[T](T) -> Equivalence[T]

fn quad[T, U, V, W](Gen[T], Gen[U], Gen[V], Gen[W]) -> Gen[(T, U, V, W)]

fn quick_check[P : Testable](P) -> Unit!Failure

fn quick_check_fn[A : @moonbitlang/core/quickcheck.Arbitrary + Shrink + Show, B : Testable]((A) -> B) -> Unit!Failure

fn quick_check_with[P : Testable](Config, P) -> Unit!Failure

fn quick_check_with_result[P : Testable](Config, P) -> TestSuccess!TestError

fn rejected() -> SingleResult

fn resize[T](Gen[T], Int) -> Gen[T]

fn run_prop[P : Testable](P) -> Gen[@rose.Rose[SingleResult]]

fn run_single_test(State, Property) -> Result[TestSuccess, State]!TestError

fn run_test(State, Property) -> TestSuccess!TestError

fn scale[T](Gen[T], (Int) -> Int) -> Gen[T]

fn shrinking[P : Testable, T]((T) -> Iter[T], T, (T) -> P) -> Property

fn sized[T]((Int) -> Gen[T]) -> Gen[T]

fn small_int() -> Gen[Int]

fn sorted_list[T : Compare](Int, Gen[T]) -> Gen[@list.T[T]]

fn succeed() -> SingleResult

fn such_that[T](Gen[T], (T) -> Bool) -> Gen[T]

fn such_that_maybe[T](Gen[T], (T) -> Bool) -> Gen[T?]

fn terminate[P : Testable](P) -> Property

fn to_property[T, U](Axiom[T], (T) -> U, (U, U) -> Bool) -> (T) -> Bool

fn to_property_eq[T, U : Eq](Axiom[T], (T) -> U) -> (T) -> Bool

fn to_property_parametric[T, M, N](Axiom[T], (T, M) -> N, (N, N) -> Bool) -> ((T, M)) -> Bool

fn to_property_parametric_eq[T, M, N : Eq](Axiom[T], (T, M) -> N) -> ((T, M)) -> Bool

fn triple[T, U, V](Gen[T], Gen[U], Gen[V]) -> Gen[(T, U, V)]

fn tuple[T, U](Gen[T], Gen[U]) -> Gen[(T, U)]

fn unident(Printer) -> Unit

fn with_discarded_ratio[P : Testable](P, Int) -> Property

fn with_max_shrinks[P : Testable](P, Int) -> Property

fn with_max_size[P : Testable](P, Int) -> Property

fn with_max_success[P : Testable](P, Int) -> Property

fn write_string(Printer, String) -> Unit

// Types and methods
pub(all) type Arrow[A, B] (A) -> B
impl[P : Testable, A : @moonbitlang/core/quickcheck.Arbitrary + Shrink + Show] Testable for Arrow[A, P]

type Axiom[T]
impl Axiom {
  new[T]((T) -> Equivalence[T]) -> Self[T]
  run[T](Self[T], T) -> Equivalence[T]
  to_property[T, U](Self[T], (T) -> U, (U, U) -> Bool) -> (T) -> Bool
  to_property_eq[T, U : Eq](Self[T], (T) -> U) -> (T) -> Bool
  to_property_parametric[T, M, N](Self[T], (T, M) -> N, (N, N) -> Bool) -> ((T, M)) -> Bool
  to_property_parametric_eq[T, M, N : Eq](Self[T], (T, M) -> N) -> ((T, M)) -> Bool
}

type Callback

type Config

type Discard
impl Default for Discard
impl Testable for Discard

pub(all) struct Equivalence[T] {
  lhs : T
  rhs : T
}
impl Equivalence {
  ap[T, U](Self[(T) -> U], Self[T]) -> Self[U]
  bind[T, U](Self[T], (T) -> Self[U]) -> Self[U]
  equal_by[T](Self[T], (T, T) -> Bool) -> Bool
  fmap[T, U](Self[T], (T) -> U) -> Self[U]
  is_equal[T : Eq](Self[T]) -> Bool
  new[T](T, T) -> Self[T]
}
impl[T : Show] Show for Equivalence[T]

type Gen[T]
impl Gen {
  ap[T, U](Self[(T) -> U], Self[T]) -> Self[U]
  array_with_size[T](Self[T], Int) -> Self[Array[T]]
  bind[T, U](Self[T], (T) -> Self[U]) -> Self[U]
  feat_random[T : @feat.Enumerable](Int) -> Self[T]
  fmap[T, U](Self[T], (T) -> U) -> Self[U]
  join[T](Self[Self[T]]) -> Self[T]
  new[T]((Int, @splitmix.RandomState) -> T) -> Self[T]
  resize[T](Self[T], Int) -> Self[T]
  run[T](Self[T], Int, @splitmix.RandomState) -> T
  sample[T](Self[T], size~ : Int = .., seed~ : UInt64 = ..) -> T
  samples[T](Self[T], size~ : Int = .., seed~ : UInt64 = ..) -> Array[T]
  scale[T](Self[T], (Int) -> Int) -> Self[T]
  spawn[T : @moonbitlang/core/quickcheck.Arbitrary]() -> Self[T]
  such_that[T](Self[T], (T) -> Bool) -> Self[T]
  such_that_maybe[T](Self[T], (T) -> Bool) -> Self[T?]
}
impl[P : Testable] Testable for Gen[P]

pub(all) enum Outcome[T] {
  Success
  GaveUp
  Fail(T)
}
impl[T] Show for Outcome[T]

type Printer
impl Printer {
  format(Self, String) -> String
  from_buffer(@buffer.T) -> Self
  ident(Self, size~ : Int = ..) -> Unit
  unident(Self) -> Unit
  write_string(Self, String) -> Unit
}

type Property
impl Testable for Property

pub(all) struct Replay {
  rand_state : @splitmix.RandomState
  size : Int
}
impl Replay {
  new(@splitmix.RandomState, Int) -> Self
}

type SingleResult
impl Testable for SingleResult

type State
impl State {
  complete_test(Self, Property) -> TestSuccess!TestError
  find_failure(Self, SingleResult, Iter[@rose.Rose[SingleResult]]) -> TestSuccess!TestError
  give_up(Self, Property) -> TestSuccess!TestError
  local_min(Self, SingleResult, Iter[@rose.Rose[SingleResult]]) -> (Int, Int, Int, SingleResult)
  run_single_test(Self, Property) -> Result[TestSuccess, Self]!TestError
  run_test(Self, Property) -> TestSuccess!TestError
}

type TestError

type TestSuccess

// Type aliases
pub typealias RandomState = @splitmix.RandomState

// Traits
pub(open) trait Shrink {
  shrink(Self) -> Iter[Self]
}
impl Shrink::shrink

pub(open) trait Testable {
  property(Self) -> Property
}
impl Testable for Unit
impl Testable for Bool
impl[P : Testable] Testable for P?
impl Testable for @rose.Rose[SingleResult]

