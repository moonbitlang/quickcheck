package "moonbitlang/quickcheck"

import(
  "moonbitlang/core/bigint"
  "moonbitlang/core/buffer"
  "moonbitlang/core/immut/list"
  "moonbitlang/core/quickcheck/splitmix"
  "moonbitlang/quickcheck/feat"
  "moonbitlang/quickcheck/rose"
)

// Values
fn alphabet() -> Gen[Char]

fn[A : Eq] associative((A, A) -> A) -> ((A, A, A)) -> Bool

fn[P : Testable] callback(P, Callback) -> Property

fn char_range(Char, Char) -> Gen[Char]

fn[P : Testable] classify(P, Bool, String) -> Property

fn[P : Testable, T : Show] collect(P, T) -> Property

fn[A, B : Eq] commutative((A, A) -> B) -> ((A, A)) -> Bool

fn[P : Testable] counterexample(P, String) -> Property

fn[A : Eq] distributive_left((A, A) -> A, (A, A) -> A) -> ((A, A, A)) -> Bool

fn[A : Eq] distributive_right((A, A) -> A, (A, A) -> A) -> ((A, A, A)) -> Bool

#deprecated
fn[P : Testable] expect_fail(P) -> Property

#deprecated
fn[P : Testable] expect_gave_up(P) -> Property

fn[A, B : Eq] ext_equal((A) -> B, (A) -> B) -> (A) -> Bool

fn failed() -> SingleResult

fn[P : Testable] filter(P, Bool) -> Property

fn[T] flatten_array(Array[Gen[T]]) -> Gen[Array[T]]

fn[T] flatten_list(@list.T[Gen[T]]) -> Gen[@list.T[T]]

fn[T] flatten_option(Gen[T]?) -> Gen[T?]

fn[T, E] flatten_result(Result[Gen[T], E]) -> Gen[Result[T, E]]

fn[T : Testable, A : Show] forall(Gen[A], (A) -> T) -> Property

fn[T : Testable, A : Show] forall_shrink(Gen[A], (A) -> Iter[A], (A) -> T) -> Property

fn[T] frequency(Array[(Int, Gen[T])]) -> Gen[T]

fn[T] frequency_list(@list.T[(Int, T)]) -> Gen[T]

fn[A : Eq] idempotent((A) -> A) -> (A) -> Bool

fn[P : Testable] if_fail(P, () -> Unit) -> Property

fn int_bound(Int) -> Gen[Int]

fn int_range(Int, Int) -> Gen[Int]

fn integer_bound(@bigint.BigInt) -> Gen[@bigint.BigInt]

fn[A : Eq, B] inverse((A) -> B, (B) -> A) -> (A) -> Bool

fn[A : Eq] involutory((A) -> A) -> (A) -> Bool

fn[P : Testable] label(P, String) -> Property

fn[A, B, C] liftA2((A, B) -> C, Gen[A], Gen[B]) -> Gen[C]

fn[A, B, C, D] liftA3((A, B, C) -> D, Gen[A], Gen[B], Gen[C]) -> Gen[D]

fn[A, B, C, D, E] liftA4((A, B, C, D) -> E, Gen[A], Gen[B], Gen[C], Gen[D]) -> Gen[E]

fn[A, B, C, D, E, F] liftA5((A, B, C, D, E) -> F, Gen[A], Gen[B], Gen[C], Gen[D], Gen[E]) -> Gen[F]

fn[A, B, C, D, E, F, G] liftA6((A, B, C, D, E, F) -> G, Gen[A], Gen[B], Gen[C], Gen[D], Gen[E], Gen[F]) -> Gen[G]

fn[T] list_with_size(Int, Gen[T]) -> Gen[@list.T[T]]

fn local_min_found(State, SingleResult) -> (Int, Int, Int, SingleResult)

fn[P : Testable] map_size(P, (Int) -> Int) -> Property

fn[P : Testable] map_total_result(P, (SingleResult) -> SingleResult) -> Property

fn[A : Compare, B : Compare] mono_decrease((A) -> B) -> ((A, A)) -> Bool

fn[A : Compare, B : Compare] mono_increase((A) -> B) -> ((A, A)) -> Bool

fn nat() -> Gen[Int]

fn neg_int() -> Gen[Int]

fn numeral() -> Gen[Char]

fn[T] one_of(Array[Gen[T]]) -> Gen[T]

fn[T] one_of_array(Array[T]) -> Gen[T]

fn[T] one_of_list(@list.T[T]) -> Gen[T]

fn[T] pure(T) -> Gen[T]

fn[T] pure_eq(T) -> Equivalence[T]

fn[T, U, V, W] quad(Gen[T], Gen[U], Gen[V], Gen[W]) -> Gen[(T, U, V, W)]

fn[P : Testable] quick_check(P, max_shrinks? : Int, max_success? : Int, max_size? : Int, discard_ratio? : Int, expect~ : Expected = .., abort~ : Bool = ..) -> Unit raise Failure

fn[A : @moonbitlang/core/quickcheck.Arbitrary + Shrink + Show, B : Testable] quick_check_fn((A) -> B, max_shrinks? : Int, max_success? : Int, max_size? : Int, discard_ratio? : Int, expect~ : Expected = .., abort~ : Bool = ..) -> Unit raise Failure

fn[P : Testable] quick_check_with(Config, P) -> Unit raise Failure

fn[P : Testable] quick_check_with_result(Config, P) -> TestSuccess raise TestError

fn rejected() -> SingleResult

fn[P : Testable] run_prop(P) -> Gen[@rose.Rose[SingleResult]]

fn[P : Testable, T] shrinking((T) -> Iter[T], T, (T) -> P) -> Property

fn[T] sized((Int) -> Gen[T]) -> Gen[T]

fn small_int() -> Gen[Int]

fn[T : Compare] sorted_list(Int, Gen[T]) -> Gen[@list.T[T]]

fn succeed() -> SingleResult

#deprecated
fn[P : Testable] terminate(P) -> Property

fn[T, U, V] triple(Gen[T], Gen[U], Gen[V]) -> Gen[(T, U, V)]

fn[T, U] tuple(Gen[T], Gen[U]) -> Gen[(T, U)]

#deprecated
fn[P : Testable] with_discarded_ratio(P, Int) -> Property

#deprecated
fn[P : Testable] with_max_shrinks(P, Int) -> Property

#deprecated
fn[P : Testable] with_max_size(P, Int) -> Property

#deprecated
fn[P : Testable] with_max_success(P, Int) -> Property

// Types and methods
pub(all) type Arrow[A, B] (A) -> B
fn[A, B] Arrow::inner(Self[A, B]) -> (A) -> B
impl[P : Testable, A : @moonbitlang/core/quickcheck.Arbitrary + Shrink + Show] Testable for Arrow[A, P]

type Axiom[T]
fn[T] Axiom::new((T) -> Equivalence[T]) -> Self[T]
fn[T] Axiom::run(Self[T], T) -> Equivalence[T]
fn[T, U] Axiom::to_property(Self[T], (T) -> U, (U, U) -> Bool) -> (T) -> Bool
fn[T, U : Eq] Axiom::to_property_eq(Self[T], (T) -> U) -> (T) -> Bool
fn[T, M, N] Axiom::to_property_parametric(Self[T], (T, M) -> N, (N, N) -> Bool) -> ((T, M)) -> Bool
fn[T, M, N : Eq] Axiom::to_property_parametric_eq(Self[T], (T, M) -> N) -> ((T, M)) -> Bool

type Callback

type Config

type Discard
impl Default for Discard
impl Testable for Discard

pub(all) struct Equivalence[T] {
  lhs : T
  rhs : T
}
fn[T, U] Equivalence::ap(Self[(T) -> U], Self[T]) -> Self[U]
fn[T, U] Equivalence::bind(Self[T], (T) -> Self[U]) -> Self[U]
fn[T] Equivalence::equal_by(Self[T], (T, T) -> Bool) -> Bool
fn[T, U] Equivalence::fmap(Self[T], (T) -> U) -> Self[U]
fn[T : Eq] Equivalence::is_equal(Self[T]) -> Bool
fn[T] Equivalence::new(T, T) -> Self[T]
impl[T : Show] Show for Equivalence[T]

pub(all) enum Expected {
  Fail
  Success
  GaveUp
}

type Gen[T]
fn[T, U] Gen::ap(Self[(T) -> U], Self[T]) -> Self[U]
fn[T] Gen::array_with_size(Self[T], Int) -> Self[Array[T]]
fn[T, U] Gen::bind(Self[T], (T) -> Self[U]) -> Self[U]
fn[T : @feat.Enumerable] Gen::feat_random(Int) -> Self[T]
fn[T, U] Gen::fmap(Self[T], (T) -> U) -> Self[U]
fn[T] Gen::join(Self[Self[T]]) -> Self[T]
fn[T] Gen::new((Int, @splitmix.RandomState) -> T) -> Self[T]
fn[T] Gen::resize(Self[T], Int) -> Self[T]
fn[T] Gen::run(Self[T], Int, @splitmix.RandomState) -> T
fn[T] Gen::sample(Self[T], size~ : Int = .., seed~ : UInt64 = ..) -> T
fn[T] Gen::samples(Self[T], size~ : Int = .., seed~ : UInt64 = ..) -> Array[T]
fn[T] Gen::scale(Self[T], (Int) -> Int) -> Self[T]
fn[T : @moonbitlang/core/quickcheck.Arbitrary] Gen::spawn() -> Self[T]
fn[T] Gen::such_that(Self[T], (T) -> Bool) -> Self[T]
fn[T] Gen::such_that_maybe(Self[T], (T) -> Bool) -> Self[T?]
impl[P : Testable] Testable for Gen[P]

pub(all) enum Outcome[T] {
  Success
  GaveUp
  Fail(T)
}
impl[T] Show for Outcome[T]

type Printer
fn Printer::format(Self, String) -> String
fn Printer::from_buffer(@buffer.T) -> Self
fn Printer::ident(Self, size~ : Int = ..) -> Unit
fn Printer::unident(Self) -> Unit
fn Printer::write_string(Self, String) -> Unit

type Property
impl Testable for Property

pub(all) struct Replay {
  rand_state : @splitmix.RandomState
  size : Int
}
fn Replay::new(@splitmix.RandomState, Int) -> Self

type SingleResult
impl Testable for SingleResult

type State
fn State::complete_test(Self, Property) -> TestSuccess raise TestError
fn State::find_failure(Self, SingleResult, Iter[@rose.Rose[SingleResult]]) -> TestSuccess raise TestError
fn State::give_up(Self, Property) -> TestSuccess raise TestError
fn State::local_min(Self, SingleResult, Iter[@rose.Rose[SingleResult]]) -> (Int, Int, Int, SingleResult)
fn State::run_single_test(Self, Property) -> Result[TestSuccess, Self] raise TestError
fn State::run_test(Self, Property) -> TestSuccess raise TestError

type TestError

type TestSuccess

// Type aliases
pub typealias @splitmix.RandomState as RandomState

// Traits
pub(open) trait Shrink {
  shrink(Self) -> Iter[Self] = _
}
impl Shrink for Unit
impl Shrink for Bool
impl Shrink for Char
impl Shrink for Int
impl Shrink for Int64
impl Shrink for UInt
impl Shrink for UInt64
impl Shrink for Float
impl Shrink for Double
impl Shrink for String
impl[T : Shrink] Shrink for T?
impl[T : Shrink, E : Shrink] Shrink for Result[T, E]
impl Shrink for Bytes
impl[X : Shrink] Shrink for Array[X]
impl[X : Shrink] Shrink for Iter[X]
impl[T : Shrink] Shrink for @list.T[T]
impl[A : Shrink, B : Shrink] Shrink for (A, B)
impl[A : Shrink, B : Shrink, C : Shrink] Shrink for (A, B, C)
impl[A : Shrink, B : Shrink, C : Shrink, D : Shrink] Shrink for (A, B, C, D)
impl[A : Shrink, B : Shrink, C : Shrink, D : Shrink, E : Shrink] Shrink for (A, B, C, D, E)
impl[A : Shrink, B : Shrink, C : Shrink, D : Shrink, E : Shrink, F : Shrink] Shrink for (A, B, C, D, E, F)

pub(open) trait Testable {
  property(Self) -> Property
}
impl Testable for Unit
impl Testable for Bool
impl[P : Testable] Testable for P?
impl Testable for @rose.Rose[SingleResult]

