package "moonbitlang/quickcheck/falsify"

import(
  "moonbitlang/core/immut/list"
  "moonbitlang/core/quickcheck/splitmix"
)

// Values
fn[T, U] ap(Gen[(T) -> U], Gen[T]) -> Gen[U]

fn[A, B] apS(Gen[(A) -> B], Gen[A]) -> Gen[B]

fn[T, U] bind(Gen[T], (T) -> Gen[U]) -> Gen[U]

fn[T : Show, E] collect(String, @list.T[T]) -> Property[Unit, E]

fn combine_shrunk(Sample, SampleTree, SampleTree, Iter[SampleTree], Iter[SampleTree]) -> Iter[SampleTree]

fn constant(UInt) -> SampleTree

fn[T, E] discard() -> Property[T, E]

fn[T, E] falsify(Config, Property[T, E]) -> (@splitmix.RandomState, @list.T[Success[T]], Int, Failure[E]?)

fn[T, U] fmap(Gen[T], (T) -> U) -> Gen[U]

fn from_rng(@splitmix.RandomState) -> SampleTree

fn from_seed(UInt64) -> SampleTree

fn[T, E] gen((T) -> String?, Gen[T]) -> Property[T, E]

fn[T] ifS(Gen[Bool], Gen[T], Gen[T]) -> Gen[T]

fn info(String) -> Property[Unit, String]

fn[T] init_state(Config) -> DriverState[T]

fn init_test_run() -> TestRun

fn[E] label(String, @list.T[String]) -> Property[Unit, E]

fn[P, N] limit_steps(ShrinkExplain[P, N], Int?) -> ShrinkExplain[P, N]

fn map(SampleTree, (UInt) -> UInt) -> SampleTree

fn[T, E] mk_property((TestRun) -> Gen[(TestResult[T, E], TestRun)]) -> Property[T, E]

fn mod(SampleTree, UInt) -> SampleTree

fn[T] new((SampleTree) -> (T, Iter[SampleTree])) -> Gen[T]

fn prim() -> Gen[UInt]

fn prim_with((Sample) -> Iter[UInt]) -> Gen[Sample]

fn[T] pure(T) -> Gen[T]

fn[T] run_gen(Gen[T], SampleTree) -> (T, Iter[SampleTree])

fn[T, E] run_property(Property[T, E]) -> Gen[(TestResult[T, E], TestRun)]

fn[T] sample(Gen[T]) -> T

fn sample_value(Sample) -> UInt

fn[A, B, C] second((B) -> C, (A, B)) -> (A, C)

fn[T, U] select(Gen[(T) -> U], Gen[Either[T, U]]) -> Gen[U]

fn[A, P, N] shrink_from(Gen[A], (A) -> IsValidShrink[P, N], (P, Iter[SampleTree])) -> ShrinkExplain[P, N]

fn[P, N] shrink_history(ShrinkExplain[P, N]) -> Array[P]

fn[P, N] shrink_outcome(ShrinkExplain[P, N]) -> (P, Iter[N]?)

fn[T] shrink_to_list(T, Iter[T]) -> Gen[T]

fn[T] test_gen((T) -> Bool, Gen[T]) -> Property[T, String]

fn view(SampleTree) -> (Sample, SampleTree, SampleTree)

// Types and methods
type Config
impl Show for Config

type DriverState[T]

type Either[L, R]

type Failure[E]
impl[E : Show] Show for Failure[E]

type Gen[T]
fn[T, U] Gen::ap(Self[(T) -> U], Self[T]) -> Self[U]
fn[A, B] Gen::apS(Self[(A) -> B], Self[A]) -> Self[B]
fn[T, U] Gen::bind(Self[T], (T) -> Self[U]) -> Self[U]
fn[T, U] Gen::fmap(Self[T], (T) -> U) -> Self[U]
fn[T] Gen::ifS(Self[Bool], Self[T], Self[T]) -> Self[T]
fn[T] Gen::run_gen(Self[T], SampleTree) -> (T, Iter[SampleTree])
fn[T] Gen::sample(Self[T]) -> T
fn[T, U] Gen::select(Self[(T) -> U], Self[Either[T, U]]) -> Self[U]
fn[A, P, N] Gen::shrink_from(Self[A], (A) -> IsValidShrink[P, N], (P, Iter[SampleTree])) -> ShrinkExplain[P, N]

type IsValidShrink[P, N]

type Property[T, E]
fn[T, E] Property::run(Self[T, E], TestRun) -> Gen[(TestResult[T, E], TestRun)]

type Sample
fn Sample::sample_value(Self) -> UInt

type SampleTree
fn SampleTree::map(Self, (UInt) -> UInt) -> Self
fn SampleTree::mod(Self, UInt) -> Self
fn SampleTree::view(Self) -> (Sample, Self, Self)

type ShrinkExplain[P, N]
fn[P, N] ShrinkExplain::limit_steps(Self[P, N], Int?) -> Self[P, N]
fn[P, N] ShrinkExplain::shrink_history(Self[P, N]) -> Array[P]
fn[P, N] ShrinkExplain::shrink_outcome(Self[P, N]) -> (P, Iter[N]?)
impl[P : Show, N : Show] Show for ShrinkExplain[P, N]

type Success[T]
impl[T : Show] Show for Success[T]

type TestResult[T, E]

type TestRun
impl Show for TestRun

// Type aliases
pub typealias List[T] = @list.T[T]

pub typealias RandomState = @splitmix.RandomState

// Traits

