package "moonbitlang/quickcheck/internal_shrinking"

import(
  "moonbitlang/core/immut/list"
)

// Values
fn[T, U] bind(ShrinkTree[T], (T) -> ShrinkTree[U]) -> ShrinkTree[U]

fn[T : Show] draw(ShrinkTree[T], Int) -> @list.T[String]

fn[T] get_value(ShrinkTree[T]) -> (T, Iter[ShrinkTree[T]])

fn[T] join(ShrinkTree[ShrinkTree[T]]) -> ShrinkTree[T]

fn[T, U] smap(ShrinkTree[T], (T) -> U) -> ShrinkTree[U]

// Types and methods
type ShrinkTree[T]
fn[T, U] ShrinkTree::bind(Self[T], (T) -> Self[U]) -> Self[U]
fn[T : Show] ShrinkTree::draw(Self[T], Int) -> @list.T[String]
fn[T] ShrinkTree::from_shinker((T) -> Iter[T], T) -> Self[T]
fn[T] ShrinkTree::from_value(T) -> Self[T]
fn[T] ShrinkTree::get_value(Self[T]) -> (T, Iter[Self[T]])
fn[T] ShrinkTree::join(Self[Self[T]]) -> Self[T]
fn[T, U] ShrinkTree::smap(Self[T], (T) -> U) -> Self[U]
impl[T : Show] Show for ShrinkTree[T]

// Type aliases

// Traits

